version: '3.9'

services:
  # PostgreSQL 16 - Primary Database
  postgres:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-motorghar}-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: ${HEALTHCHECK_INTERVAL:-10s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-5}
    networks:
      - motorghar-network
    env_file:
      - .env.docker

  # pgAdmin - Database Management UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${COMPOSE_PROJECT_NAME:-motorghar}-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - motorghar-network
    env_file:
      - .env.docker

  # Redis 7 - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-motorghar}-redis
    command: redis-server --appendonly ${REDIS_AOF_ENABLED:-yes} --appendfsync ${REDIS_AOF_SYNC:-everysec}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${HEALTHCHECK_INTERVAL:-10s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-5}
    networks:
      - motorghar-network
    env_file:
      - .env.docker

  # MinIO - S3-Compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: ${COMPOSE_PROJECT_NAME:-motorghar}-minio
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9001}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: ${HEALTHCHECK_INTERVAL:-10s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-5}
    networks:
      - motorghar-network
    env_file:
      - .env.docker

  # MinIO Client - Bucket Initialization
  minio-init:
    image: minio/mc:latest
    container_name: ${COMPOSE_PROJECT_NAME:-motorghar}-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb myminio/${MINIO_BUCKET_DOCUMENTS:-motorghar-documents} --ignore-existing;
      mc mb myminio/${MINIO_BUCKET_DEFAULTS:-motorghar-defaults} --ignore-existing;
      mc mb myminio/${MINIO_BUCKET_USER_UPLOADS:-motorghar-user-uploads} --ignore-existing;
      mc policy set download myminio/${MINIO_BUCKET_DEFAULTS:-motorghar-defaults};
      mc policy set private myminio/${MINIO_BUCKET_DOCUMENTS:-motorghar-documents};
      mc policy set private myminio/${MINIO_BUCKET_USER_UPLOADS:-motorghar-user-uploads};
      echo 'MinIO buckets initialized successfully';
      exit 0;
      "
    networks:
      - motorghar-network
    env_file:
      - .env.docker

networks:
  motorghar-network:
    name: ${COMPOSE_PROJECT_NAME:-motorghar}-network
    driver: bridge

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME:-motorghar}-postgres-data
  pgadmin_data:
    name: ${COMPOSE_PROJECT_NAME:-motorghar}-pgadmin-data
  redis_data:
    name: ${COMPOSE_PROJECT_NAME:-motorghar}-redis-data
  minio_data:
    name: ${COMPOSE_PROJECT_NAME:-motorghar}-minio-data
